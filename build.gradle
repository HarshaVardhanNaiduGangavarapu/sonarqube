plugins {
	id 'java'
	id "jacoco"
	id "org.sonarqube" version "5.0.0.4638"
	id "io.freefair.lombok" version "8.6"
	id 'org.springframework.boot' version '3.3.1'
	id 'io.spring.dependency-management' version '1.1.5'
}

group = 'com.harsha'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'com.fasterxml.jackson.core:jackson-core:2.17.2'
	implementation 'commons-io:commons-io:2.16.1'
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.2'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation 'org.projectlombok:lombok:0.11.0'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testImplementation 'com.h2database:h2:2.2.224'
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.17.2'
}

tasks.named('test') {
	useJUnitPlatform()
}

jacocoTestReport {
	reports {
		xml.required = true
	}

	dependsOn test

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					"**/VelocityLimitsApplication.*"
			])
		}))
	}
}

jacocoTestCoverageVerification {
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: "${project.buildDir}/classes/main", exclude: [
					"**/VelocityLimitsApplication.class",
					"**/util/DateTimeUtil.class"
			])
		}))
	}
}

test.finalizedBy 'jacocoTestReport'

sonar {
	properties {
		property "sonar.projectKey", "HarshaVardhanNaiduGangavarapu_sonarqube_bb240e5a-4ff2-410f-a68a-6debb83f618f"
		property "sonar.projectName", "sonarqube"
		properties["sonar.sources"] += "build.gradle"
	}
}
